<launch>
    <arg name="topic_name" default="/onboard_worldmodel/pointcloud_vis" />

    <arg name="gdb" default="false" />
    <arg name="valgrind" default="false" />
    <arg name="cachegrind" default="false" />

    <group ns="surface_extraction">
        <env name="ROSCONSOLE_CONFIG_FILE" value="$(find surface_extraction_launch)/custom_rosconsole.conf"/>

        <!-- Load parameters -->
        <rosparam command="load" file="$(find surface_extraction_launch)/params.yaml" />

        <!-- Nodelet manager -->
        <node if="$(arg gdb)" pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" required="true"
              output="screen" launch-prefix="xterm -fs 18 -e gdb --args" />

        <!--Nodelet manager -->
        <node if="$(arg valgrind)" pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" required="true"
              output="screen" launch-prefix="valgrind" />

        <!-- Nodelet manager -->
        <node if="$(arg cachegrind)" pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" required="true"
              output="screen" launch-prefix="valgrind --tool=callgrind" />

        <!-- Nodelet manager -->
        <group unless="$(arg gdb)">
            <group unless="$(arg valgrind)">
                <node unless="$(arg cachegrind)" pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager"
                      required="true" output="screen" />
            </group>
        </group>

        <!-- SurfaceManager -->
        <node pkg="nodelet" type="nodelet" name="surface_manager" args="load surface_manager/SurfaceManager nodelet_manager">
            <!-- Topics -->
            <!-- TODO: Do this remapping inside extract_surfaces_full for separation of concerns -->
            <remap from="~add_surface" to="surface_builder/new_surface" />
            <remap from="~add_surface_mesh" to="surface_builder/new_surface_mesh" />
            <remap from="~replace_surface" to="surface_builder/updated_surface" />
            <remap from="~replace_surface_mesh" to="surface_builder/updated_surface_mesh" />

            <!-- Params -->
            <param name="new_scene_threshold" value="0.8" />
            <param name="max_queue_size" value="1000" />
        </node>

        <!-- SurfaceBuilder -->
        <node pkg="nodelet" type="nodelet" name="surface_builder" args="load surface_filters/BuildSurface nodelet_manager">
            <!-- Topics -->
            <remap from="~create_surface" to="sac_segmentation/segments" />
            <remap from="~update_surface" to="expand_surfaces/expanded_segments" />

            <!-- Params -->
            <param name="dimension" value="2" />
            <remap from="~alpha" to="parallel_distance_threshold" />
            <remap from="~target_frame" to="target_frame" />

            <!-- This nodelet receives and publishes lots of near-simultaneous messages -->
            <param name="max_queue_size" value="1000" />
        </node>

        <!-- Crop -->
        <node pkg="nodelet" type="nodelet" name="crop" args="load pcl/CropBox nodelet_manager">
            <!-- Topics -->
            <remap from="~input" to="$(arg topic_name)" />

            <!-- Params -->
            <remap from="~min_x" to="crop_box_min/x" />
            <remap from="~min_y" to="crop_box_min/y" />
            <remap from="~min_z" to="crop_box_min/z" />
            <remap from="~max_x" to="crop_box_max/x" />
            <remap from="~max_y" to="crop_box_max/y" />
            <remap from="~max_z" to="crop_box_max/z" />
        </node>

        <!-- Downsample -->
        <node pkg="nodelet" type="nodelet" name="downsample" args="load pcl/VoxelGrid nodelet_manager">
            <!-- Topics -->
            <remap from="~input" to="crop/output" />

            <!-- Params -->
            <remap from="~leaf_size" to="downsample_resolution" />
            <param name="filter_field_name" value="" />

            <!-- input_frame transforms the cloud into the frame before the filter -->
            <remap from="~input_frame" to="target_frame" />
            <!-- output_frame tells the nodelet to not re-transform the cloud into the original frame -->
            <remap from="~output_frame" to="target_frame" />
        </node>

        <!-- Change Detection (does NOT perform downsampling) -->
        <node pkg="nodelet" type="nodelet" name="change_detect" args="load surface_filters/ChangeDetection nodelet_manager">
            <!-- Topics -->
            <remap from="~input" to="downsample/output" />

            <!-- Params -->
            <remap from="~resolution" to="downsample_resolution" />
        </node>

        <!-- Full-Scene Pipeline -->
        <include file="$(find surface_extraction_launch)/launch/extract_surfaces_full.launch">
            <arg name="input_topic" value="change_detect/new_scene" />
            <arg name="surfaces_manager_node" value="surface_manager" />
        </include>

        <!-- Extract new points for input to partial-scene pipeline -->
        <!--<node pkg="nodelet" type="nodelet" name="publish_new" args="load pcl/ExtractIndices nodelet_manager">-->
            <!--&lt;!&ndash; Topics &ndash;&gt;-->
            <!--<remap from="~input" to="change_detect/output" />-->
            <!--<remap from="~indices" to="change_detect/new_indices" />-->

            <!--&lt;!&ndash; Params &ndash;&gt;-->
            <!--<param name="use_indices" value="true" />-->
        <!--</node>-->

        <!-- Partial-Scene Pipeline -->
        <include file="$(find surface_extraction_launch)/launch/extract_surfaces_partial.launch">
            <arg name="input_topic" value="change_detect/output" />
            <arg name="new_indices" value="change_detect/new_indices" />
            <arg name="surfaces_manager_node" value="surface_manager" />
        </include>

    </group>
</launch>
