#! /usr/bin/env python
PACKAGE = 'surface_filters'

# noinspection PyPep8
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

model_types = ("Plane,Line,Circle 2D,Circle 3D,Sphere,Cylinder,Cone,Torus,Parallel Line,Perpendicular Plane,"
               "Parallel Lines,Normal Plane,Normal Sphere,Registration,Registration 2D,Parallel Plane,"
               "Normal Parallel Plane,Stick").split(',')
methods = "RANSAC,LMEDS,MSAC,RRANSAC,RMSAC,MLESAC,PROSAC".split(',')

locator_enum = gen.enum([gen.const("ANN", int_t, 0, "ANN"), gen.const("FLANN", int_t, 1, "FLANN"),
                         gen.const("organized", int_t, 2, "Dense/organized data locator")], "Set the spatial locator")
model_enum = gen.enum([gen.const(model.replace(' ', '_'), int_t, i, model) for i, model in enumerate(model_types)],
                      "Set the model type")
method_enum = gen.enum([gen.const(method, int_t, i, method) for i, method in enumerate(methods)], "Set the SAC method")
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add("spatial_locator", int_t, 0, "Set the spatial locator", default=0, min=0, max=2, edit_method=locator_enum)
gen.add("use_normals", bool_t, 0, "Use normals", default=False)
gen.add("model_type", int_t, 0, "Set the model type", default=0, max=len(model_types) - 1, min=0,
        edit_method=model_enum)
gen.add("method_type", int_t, 0, "Set the SAC method", default=0, max=len(methods) - 1, min=0, edit_method=method_enum)
gen.add("distance_threshold", double_t, 0, "Set the threshold for distance to the model", default=0, min=0, max=10)
gen.add("max_iterations", int_t, 0, "Set the maximum number of iterations before giving up", default=50, min=1,
        max=1000)
gen.add("probability", double_t, 0, "Set the probability of choosing at least one sample free from outliers",
        default=0.99, min=0, max=1)
gen.add("optimize_coefficients", bool_t, 0, "Set to true if a coefficient refinement is required", default=True)
gen.add("radius_min", double_t, 0,
        "Set the minimum allowable radius for the model (applicable to models that estimate a radius)",
        default=gen.minval['int'])
gen.add("radius_max", double_t, 0,
        "Set the maximum allowable radius for the model (applicable to models that estimate a radius)",
        default=gen.maxval['int'])
# The following are too annoying to implement, and I don't need them yet
# gen.add("samples_max_dist", double_t, 0, "Set the maximum distance allowed when drawing random samples.",
#         default=0, min=0, max=100)
# gen.add("axis_x", double_t, 0,
#         "Set the axis along which we need to search for a model perpendicular to (x component)")
# gen.add("axis_y", double_t, 0,
#         "Set the axis along which we need to search for a model perpendicular to (y component)")
# gen.add("axis_z", double_t, 0,
#         "Set the axis along which we need to search for a model perpendicular to (z component)")
gen.add("epsilon_angle", double_t, 0,
        "Set the maximum allowed difference between the model normal and the given axis in radians", default=0)
gen.add("min_points", int_t, 0, "Set the minimum number of points required for a surface", default=50, min=1, max=10000)
exit(gen.generate(PACKAGE, "surface_filters", "SAC"))
