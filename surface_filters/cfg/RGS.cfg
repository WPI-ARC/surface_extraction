#! /usr/bin/env python
import math

PACKAGE='surface_filters'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

enum = gen.enum ([ gen.const("ANN", int_t, 0, "ANN"), gen.const("FLANN", int_t, 1, "FLANN"), gen.const("organized", int_t, 2, "Dense/organized data locator") ], "Set the spatial locator")
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add("spatial_locator", int_t, 0, "Set the spatial locator", 0, 0, 2, enum)
gen.add("min_cluster_size", int_t, 0, "Set the minimum number of points that a cluster needs to contain in order to be considered valid", default=1, min=1)
gen.add("max_cluster_size", int_t, 0, "Set the maximum number of points that a cluster needs to contain in order to be considered valid", default=gen.maxval['int'], min=1)
gen.add("smooth_mode", bool_t, 0, "Smooth Mode (if true, tests normals against neighbors' normals; otherwise tests normals against the starting point's normal)", default=True)
gen.add("curvature_test", bool_t, 0, "Curvature test (if this is set to False, then Residual test will be set to True)", default=True)
gen.add("residual_test", bool_t, 0, "Residual test (if this is set to False, then Curvature test will be set to True)", default=False)
gen.add("smoothness_threshold", double_t, 0, "Smoothness threshold for angle between normals", min=0, default=(30.0 / 180.0 * math.pi))
gen.add("residual_threshold", double_t, 0, "Residual threshold", min=0, default=0.05)
gen.add("curvature_threshold", double_t, 0, "Curvature threshold", min=0, default=0.05)
gen.add("number_of_neighbors", int_t, 0, "Number of neighbors used for knn", min=1, default=30)
exit (gen.generate (PACKAGE, "surface_filters", "RGS"))

